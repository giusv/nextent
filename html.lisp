(in-package :html)

(defprim taglist (&rest tags)
  (:pretty () `(taglist (:tags ,(synth-all :pretty tags))))
  (:doc () (apply #'doc:vcat (synth-all :doc tags))))


(defmacro deftag (name)
  `(defprim ,name (&rest args)
     (:pretty () `(,',name (:attributes ,(rest-key args) :body ,(synth-all :pretty (rest-plain args)))))
     (:doc () (labels ((stringify (item)
                         (if (or (numberp item) (stringp item) (keywordp item))
                             item
                             (synth :string item)))
                       (open-tag (as) (doc:text "<~(~a~)~{ ~(~a~)=\"~(~a~)\"~}>" ',name (mapcar #'stringify as)))
                       (close-tag () (doc:text "</~(~a~)>" ',name))
                       (open-close-tag (as) (doc:text "<~(~a~)~{ ~(~a~)=\"~a\"~}/>" ',name (mapcar #'stringify as))))
                (let ((attributes (rest-key args))
                      (body (rest-plain args)))
                  (if (null body)
                      (open-close-tag attributes)
                      (doc:vcat (open-tag attributes)
                                (doc:nest 4 (apply #'doc:vcat (synth-all :doc body)))
                                (close-tag))))))))
(deftag div)
(deftag input)
;; (defprim div (&rest args)
;;   (:pretty () `(div (:attributes ,(rest-key args) :body ,@(synth-all :pretty (rest-plain args)))))
;;   (:doc () (labels ((open-tag (as) (doc:text "<~(~a~)~{ ~(~a~)=\"~(~a~)\"~}>" 'div as))
;;                     (close-tag () (doc:text "</~(~a~)>" 'div))
;;                     (open-close-tag (as) (doc:text "<~(~a~)~{ ~(~a~)=\"~a\"~}/>" 'div as)))
;;              (let ((attributes (rest-key args))
;;                    (body (rest-plain args)))
;;                (if (null body)
;;                    (open-close-tag attributes)
;;                    (vcat (open-tag attributes)
;;                          (nest 4 (apply #'vcat (synth-all :doc body)))
;;                          (close-tag)))))))
