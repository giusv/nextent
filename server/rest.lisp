(in-package :server)

(defprim rest-service (name url &rest resources)
  (:pretty () (list 'rest-service (list :name name :url (synth :pretty url) :resources (synth-all :pretty resources))))
  (:class () (bb-unit name
                          (bb-annotation '|Path| (doc:double-quotes (synth :url url)))
                          (bb-class name :public t
                                    :methods (apply #'append (synth-all :endpoints resources url))))))

(defprim rest-static (name actions &rest resources)
  (:pretty () (list 'rest-static (list :name name :resources (synth-all :pretty resources) 
                                       :actions (synth-all :pretty actions))))
  (:endpoints (path)  (let* ((chunk (url:static-chunk name))
                             (newpath (url:backward-chain chunk path)))
                         (apply #'append (synth-all :interface actions newpath chunk)
                                (synth-all :endpoints resources newpath)))))


(defprim rest-dynamic% (name param actions &rest resources)
  (:pretty () (list 'rest-dynamic (list :name name :param param :resources (synth-all :pretty resources) 
                                        :actions (synth-all :pretty actions))))
  (:endpoints (path) (let* ((chunk (url:dynamic-chunk param))
                             (newpath (url:backward-chain chunk path)))
                         (apply #'append (synth-all :interface actions newpath chunk)
                                (synth-all :endpoints resources newpath)))))

(defmacro rest-dynamic (name (param) actions &rest resources)
  `(let ((,param (url:path-parameter ',param)))
     (rest-dynamic% ,name ',param ,actions ,@resources)))

;; (defmacro defact (name)
;;   (let ((full-name (symb "REST-" name)))
;;     `(defprim ,full-name ()
;;        (:interface (path name) (bb-with-annotations (list (bb-annotation ,(string-upcase name))
;;                                                      (bb-annotation '|Path| (doc:double-quotes (synth :url path))))
;;                                                (bb-method (doc:text "get~a" (doc:upper-camel name)) nil (bb-type 'void)))))))

(defun parlist (type pars)
  (mapcar (lambda (par)
            (bb-with-annotations (list (bb-annotation type (doc:double-quotes (doc:text "~a" (doc:lower-camel par)))))
                                 (bb-pair (doc:lower-camel par) (bb-type 'int :primitive t)) :newline nil)) 
          pars))
(defun path-parameters (path)
  (mapcar (lambda (par)
            (bb-with-annotations (list (bb-annotation '|PathParam| (doc:double-quotes (doc:text "~a" (doc:lower-camel par)))))
                                 (bb-pair (doc:lower-camel par) (bb-type 'int :primitive t)) :newline nil)) 
          (synth :path-parameters path)))

(defprim rest-get% (queries action &key (mtypes (list '|application/json|)))
  (:pretty () (list 'rest-get (list :queries queries :action (synth :pretty action) :mtypes mtypes)))
  (:interface (path chunk) (bb-with-annotations 
                                            (list (bb-annotation '|GET|)
                                                  (bb-annotation '|Path| (doc:double-quotes (synth :url path)))
                                                  (if mtypes (apply #'bb-annotation '|Produces| 
                                                                    (mapcar (lambda (type) (doc:double-quotes (doc:text "~a" type))) mtypes))))
                                            (bb-method (doc:text "get~a" (doc:upper-camel (synth :name chunk)))
                                                       (append (parlist '|PathParam| (synth :path-parameters path))
                                                               (parlist '|QueryParam| queries)) 
                                                       (bb-type 'response)
                                                       action))))
(defmacro rest-get ((&rest queries) action &key mtypes)
  `(let ,(mapcar #'(lambda (query) 
                     `(,query ',query))
                 queries)
     (rest-get% (list ,@queries) ,action ,@(if mtypes `(:mtypes ,mtypes)))))

(defprim rest-post (action &key (mtypes (list '|application/json|)))
  (:pretty () (list 'rest-post (list  :action (synth :pretty action) :mtypes mtypes)))
  (:interface (path chunk) (bb-with-annotations (list (bb-annotation '|POST|)
                                                      (bb-annotation '|Path| (doc:double-quotes (synth :url path)))
                                                      (if mtypes 
                                                          (apply #'bb-annotation '|Consumes|  (mapcar (lambda (type) (doc:double-quotes (doc:text "~a" type))) mtypes))))
                                                (bb-method (doc:text "post~a" (doc:upper-camel (synth :name chunk))) 
                                                           (parlist '|PathParam| (synth :path-parameters path))
                                                           (bb-type 'response)))))

(defprim rest-put (action &key (mtypes (list '|application/json|)))
  (:pretty () (list 'rest-put (list :action (synth :pretty action) :mtypes mtypes)))
  (:interface (path chunk) (bb-with-annotations (list (bb-annotation '|PUT|)
                                                      (bb-annotation '|Path| (doc:double-quotes (synth :url path)))
                                                      (if mtypes 
                                                          (apply #'bb-annotation '|Consumes|  (mapcar (lambda (type) (doc:double-quotes (doc:text "~a" type))) mtypes))))
                                                (bb-method (doc:text "put~a" (doc:upper-camel (synth :name chunk))) 
                                                           (parlist '|PathParam| (synth :path-parameters path))
                                                           (bb-type 'response)))))
