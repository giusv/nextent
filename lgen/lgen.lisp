(in-package :lgen)
(defprim node (name)
  (:pretty () (list 'node (list :name name))))

(defprim edge (from to &optional label)
  (:pretty () (list 'edge (list :from (synth :pretty from) :to (synth :pretty to) :label label))))

(defprim graph (nodes edges)
  (:pretty () (list 'graph (list :nodes (synth-all :pretty nodes) :edges (synth-all :pretty edges)))))

(defprim fsm (nodes edges start accept)
  (:pretty () (list 'fsm (list :nodes (synth-all :pretty nodes) :edges (synth-all :pretty edges)
                               :start (synth :pretty start)
                               :accept (synth-all :pretty accept)))))


;; (defmacro defsm (&rest ))
(defprim epsilon ()
  (:pretty () (list 'epsilon))
  (:nfa () (let* ((i (node 'start-empty))
                  (f (node 'accept-empty))
                  (e (edge i f))
                  ;; (g (graph (list i f)
                  ;;           (list e)))
                  )
             (fsm (list i f) (list e) i (list f)))))

(defprim sym (value)
  (:pretty () (list 'sym (list :value value)))
  (:nfa () (let* ((i (node (symb 'start "-" value)))
                  (f (node (symb 'accept "-" value)))
                  (e (edge i f value))
                  ;; (g (graph (list i f)
                  ;;           (list e)))
                  )
             (fsm (list i f) (list e) i (list f)))))

(defprim bar (&rest res)
  (:pretty () (list 'bar (list :res (synth-all :pretty res))))
  (:nfa () (let* ((nfas (synth-all :nfa res))
                  (i (node (symb 'start-bar)))
                  (f (node (symb 'accept-bar)))
                  (internal-nodes (apply #'append (synth-all :nodes nfas)))
                  (internal-edges (apply #'append (synth-all :edges nfas)))
                  (start-edges (mapcar (lambda (node) (edge i node)) 
                                       (synth-all :start nfas)))
                  (accept-edges (mapcar (lambda (node) (edge node f)) 
                                       (apply #'append (synth-all :accept nfas)))))
             (fsm (append* i f internal-nodes)
                  (append internal-edges start-edges accept-edges)
                  i (list f)))))

(defprim cat (&rest res)
  (:pretty () (list 'cat (list :res (synth-all :pretty res))))
  (:nfa () (let* ((nfas (synth-all :nfa res))
                  (nodes (apply #'append (synth-all :nodes nfas)))
                  (edges (mapcar (lambda (pair)
                                   (edge (car (synth :accept (car pair)))
                                         (synth :start (cadr pair))))
                                 (overlaps nfas))))
             (progn (my-debug "cat"
                              nodes 
                              edges)
                    (fsm nodes edges (synth :start (car nfas)) (synth :accept (car (last nfas))))))))

(defprim star (re)
  (:pretty () (list 'star (list :re (synth :pretty re))))
  (:nfa () (let* ((nfa (synth :nfa re))
                  (i (node (symb 'start-star)))
                  (f (node (symb 'accept-star)))
                  (nodes (synth :nodes nfa))
                  (edges (append* (edge i (synth :start nfa))
                                  (edge (car (synth :accept nfa)) f)
                                  (edge (car (synth :accept nfa)) (synth :start nfa))
                                  (edge i f)
                                  (synth :edges nfa))))
             (fsm nodes edges i (list f)))))


(pprint (synth :pretty (synth :nfa (star (sym 'a)))))
