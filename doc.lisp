(in-package :doc)

(defprim empty ()
  (:pretty () `(empty))
  (:output (*) ())
  (:string () ())
  (:doc () this)
  (:extent () 0))

(defprim text (template &rest args)
  (:pretty () `(text (:template ,template :args ,args)))
  (:output (indent) (format t "~v,0t~?" indent template args))
  (:string () (with-output-to-string (*standard-output*)
                (synth :output this 0)))
  ;; (:doc () (apply #'text template args))
  (:doc () this)
  (:extent () (length (apply #'format nil template args))))

(defprim nest (amount doc)
  (:pretty () `(nest (:amount ,amount :doc ,(synth :pretty doc))))
  (:output (indent) (synth :output doc (+ indent amount)))
  (:string () (with-output-to-string (*standard-output*)
			(synth :output this 0)))
  (:doc () this)
  (:extent () (+ amount (synth :extent doc))))

(defprim vcat (&rest docs)
  (:pretty () `(vcat (:docs ,(synth-all :pretty docs))))
  (:output (indent) (let ((fdocs (flatten docs)))
		     (unless (null fdocs) 
		       (progn (synth :output (car fdocs) indent)
			      (unless (null (cdr fdocs)) 
				(progn (format t "~%"))
				(synth :output (apply #'vcat (cdr fdocs)) indent))))))
  (:string () (with-output-to-string (*standard-output*)
			(synth :output this 0)))
  (:doc () this)  
  (:extent () (let ((fdocs (flatten docs)))
		     (synth :extent (car (last fdocs))))))

(defprim hcat (&rest docs)
  (:pretty () `(hcat (:docs ,(synth-all :pretty docs))))
  (:output (indent) (let ((fdocs (flatten docs)))
		     (unless (null fdocs) 
		     	 (progn (synth :output (car fdocs) indent)
		     		(synth :output (apply #'hcat (cdr fdocs)) (+ indent (synth :extent (car fdocs))))))))
  (:string () (with-output-to-string (*standard-output*)
			(synth :output this 0)))
  (:doc () (apply #'hcat docs))
  (:extent () (let ((fdocs (flatten docs)))
	       (reduce #'+ (synth-all :extent fdocs)))))


