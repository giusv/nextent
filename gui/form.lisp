(in-package :gui)

(defprim form% (name schema element)
  (:pretty () (list 'form (list :name name :schema (synth :pretty schema) 
                                :element (synth :pretty element))))
  (:req (path) (html:taglist 
                (doc:text "Form identificato con ~a collegato al seguente formato dati:" (lower-camel name)) 
                (html:p (synth :req schema))
                (synth :req element path)
                (html:p (doc:text "Esso produce il seguente oggetto JSON:")
                        (html:code (synth :string (synth :model this))))))
  (:brief (path) (synth :req this path))
  (:model () (apply #'jobject (apply #'append (synth-all :model bindings))))
  (:reqlist (*) nil)
  (:template () (html:tag (string-downcase name) (doc:empty)))
  (:controller () (bb-empty))
  (:components (father) 
               (let ((unit-name 
                      (if father 
                          (symb father "-" name)
                          name))
                     (template 
                      (bb-template 
                       (html:form 
                        ;; (keyw (synth :string (doc:brackets (doc:text "~a" (lower-camel (synth :type element))))))
                        :|[formGroup]| (lower-camel name)
                        (synth :form-template element name nil))))
                     (controller 
                      (list (bb-pair name (synth :type element))
                            (bb-constructor (list (bb-pair 'fb (bb-type'form-builder) :private t))
                                            (bb-assign (bb-chain (bb-dynamic 'this) (bb-dynamic name))
                                                       (synth :form element)
                                                       ;; (bb-chain (bb-dynamic 'this) (bb-dynamic 'fb)
                                                       ;;           (bb-call 'group 
                                                       ;;                    (bb-object (keyw (synth :name element)) 
                                                       ;;                               (synth :form element))))
                                                       ))
                            (synth :form-controller element (list (list* name 'form-group)))))) 
                 (list (bb-unit unit-name
                                (bb-import "@angular/core" 'component)
                                (bb-import "@angular/forms" 'form-array 'form-builder 'form-group 'form-control)
                                (synth :imports this)
                                (bb-annotation 'component
                                              :selector (bb-const (string-downcase name))
                                              :template template )
                                (bb-class (mkstr unit-name "-component")
                                          :fields controller)))))
  (:routes (*) nil)
  (:imports () (synth :imports element))
  (:dependencies () (synth :dependencies element)))

(defmacro form (name schema binds elem)
  `(let* ,(mapcar #'(lambda (bind)
		      (destructuring-bind (name key elem) bind
			`(,name (bnd ',key ,elem))))
		  binds) 
     (form% ,name ,schema (obj% ,name ,schema (list ,@(mapcar #'car binds)) ,elem))))

(defprim bnd (name element)
  (:pretty () (list 'bnd (list :name name :element (synth :pretty element))))
  (:req (path) (html:div nil (synth :req element path)))
  (:brief (path) (synth :req this path))
  (:model () (list (keyw name) (synth :model element)))
  (:reqlist (*) nil)
  (:form-template (loopvar indexes) (synth :form-template element loopvar indexes))
  (:form-controller (path) (synth :form-controller element path))
  (:components (*) nil)
  (:routes (*) nil)
  (:form () (list (keyw name) (synth :form element)))
  (:type () (error "should not be visible"))
  (:imports () (synth :imports element))
  (:dependencies () (synth :dependencies element)))

(defprim obj% (name schema bindings element)
  (:pretty () (list 'obj (list :name name :schema (synth :pretty schema) 
                               :bindings (synth-plist-both :pretty :pretty bindings) 
                               :element (synth :pretty element))))
  (:req (path) (html:taglist 
                (doc:text "Sezione identificata con ~a collegata al seguente formato dati:" (lower-camel name)) 
                (html:a :href (concatenate 'string "#" (synth :string (synth :brief schema) 0))
                        (synth :brief schema))
                ;; (html:p (synth :brief schema))
                (synth :req element path)
                (html:p (doc:text "Essa produce il seguente oggetto JSON:")
                        (html:code (synth :string (synth :model this))))))
  (:brief (path) (synth :req this))
  (:model () (apply #'jobject (apply #'append (synth-all :model bindings))))
  (:reqlist (*) nil)
  (:form-template (loopvar indexes) (html:taglist (synth-all :form-template bindings loopvar indexes)))
  (:form-controller (path) (bb-list (synth-all :form-controller bindings path ;; (append path (list (list* name 'form-group)))
                                               )))
  (:components (*) nil)
  (:routes (*) nil)
  (:form () (bb-new 'form-group (bb-object (apply #'append (synth-all :form bindings))))
         ;; (bb-chain (bb-dynamic 'this) (bb-dynamic 'fb)
         ;;              (bb-call 'group (bb-object (apply #'append (synth-all :form bindings)))))
         )
  (:type () (bb-type 'form-group))
  (:imports () (cons (bb-import (mkstr "./" (string-downcase (synth :name schema))) (synth :name schema))
                     (apply #'append 
                       (synth-plist-merge (lambda (pair)
                                            (synth :imports (cadr pair)))
                                          bindings))))
  (:dependencies () (synth :dependencies element)))

(defmacro obj (name schema binds elem)
  `(let* ,(mapcar #'(lambda (bind)
		      (destructuring-bind (name key elem) bind
			`(,name (bnd ',key ,elem))))
		  binds) 
     (let ((f (obj% ,name ,schema (list ,@(mapcar #'car binds)) ,elem))) 
       (values f f))))

(defprim arr% (name schema element)
  (:pretty () (list 'arr (list :name name 
                               :schema (synth :pretty schema) 
                               :element (synth :pretty element))))
  (:req (path) (html:taglist 
                (doc:text "Sezione dinamica identificata con ~a collegata al seguente formato dati:" (lower-camel name)) 
                (html:p (synth :brief schema)) 
                (synth :req element path)
                (html:p (doc:text "Essa produce il seguente oggetto JSON:")
                        (html:code (synth :string (synth :model this))))))
  (:brief (path) (synth :req this path))
  (:model () (jarray (synth :model element)))
  (:reqlist (*) nil)
  (:form-template (loopvar indexes) 
                  (let ((new-loopvar (lower-camel (gensym "v")))
                        (new-index (lower-camel (gensym "i"))))
                    (html:div 
                     :|formArrayName| (lower-camel name)
                     (html:div :|*ngFor| (doc:text "let ~a of ~a.controls['~a'].controls; let ~a=index" 
                                                   new-loopvar 
                                                   (lower-camel loopvar)
                                                   (lower-camel name)
                                                   ;; (mapcar #'lower-camel (append* (cdr path) name))
                                                   new-index)
                               :|class| "panel panel-primary" 
                               (html:div 
                                :|class| "panel-heading" 
                                (html:span (doc:text "~a" name))
                                (html:span :|class| "glyphicon glyphicon-remove pull-right"
                                           :|(click)| (doc:hcat (doc:text "remove~aElement" (upper-camel name))
                                                                (doc:parens (apply #'doc:punctuate (doc:comma) nil
                                                                                   (mapcar (lambda (index)
                                                                                             (doc:text "~a" (lower-camel index)))
                                                                                           (append indexes (list new-index)))))) (doc:empty))) 
                               (html:div 
                                :|class| "panel-body"
                                :|[formGroupName]| new-index
                                (synth :form-template element new-loopvar (append indexes (list new-index)))))
                     (html:button :|(click)| (doc:hcat (doc:text "add~aElement" (upper-camel name))
                                                       (doc:parens (apply #'doc:punctuate (doc:comma) nil
                                                                          (mapcar (lambda (index)
                                                                                    (doc:text "~a" (lower-camel index)))
                                                                                  indexes)))) 
                                  :|type| "button"
                                  (doc:text "+" ))
                     )))
  (:form-controller (path) 
                    (let ((newpath (append path (list (list* (lower-camel (mkstr name)) 'form-array))) )
                          (newindex (gensym "i") ))
                      (bb-list 
                       ;; (bb-comment (doc:text "~{~a ~^->~}" newpath))
                       (bb-method (doc:text "add~aElement" (upper-camel name)) 
                                  (mapcar (lambda (index)
                                            (bb-pair (car index) (bb-type 'number :primitive t)))
                                          (remove-if-not (lambda (elem) (eq 'form-group (cdr elem)))
                                                         (cdr newpath)))
                                  (bb-type :void)
                                  (bb-chain (reduce (lambda (acc elem)
                                                      (bb-chain acc 
                                                                (bb-element 'controls (bb-const (car elem))) 
                                                                :as (cdr elem)))
                                                    (cdr newpath)
                                                    :initial-value (bb-chain (bb-dynamic 'this)
                                                                             (bb-dynamic (caar newpath))))
                                            (bb-call 'push (synth :form element)
                                                     ;; (bb-chain (bb-dynamic 'this)
                                                     ;;           (bb-dynamic 'fb)
                                                     ;;           (bb-call 'group (bb-new (synth :name element))))
                                                     ))
                                  )
                       (bb-method (doc:text "remove~aElement" (upper-camel name)) 
                                  (mapcar (lambda (index)
                                            (bb-pair (car index) (bb-type 'number :primitive t)))
                                          (append (remove-if-not (lambda (elem) (eq 'form-group (cdr elem)))
                                                                 (cdr newpath)) (list (list* newindex nil))))
                                  (bb-type :void)
                                  (bb-chain (reduce (lambda (acc elem)
                                                      (bb-chain acc 
                                                                (bb-element 'controls (bb-const (car elem))) 
                                                                :as (cdr elem)))
                                                    (cdr newpath)
                                                    :initial-value (bb-chain (bb-dynamic 'this)
                                                                             (bb-dynamic (caar newpath))))
                                            (bb-call 'remove-at (bb-dynamic newindex)))

                                  )
                       (synth :form-controller element (append path (list (list* (lower-camel (mkstr name)) 'form-array)
                                                                          (list* (gensym) 'form-group))) ))))
  (:components (*) nil)
  (:routes (*) nil)
  (:form () (bb-new 'form-array (bb-array (synth :form element)))
         ;; (bb-chain (bb-dynamic 'this) (bb-dynamic 'fb)
         ;;              (bb-call 'array (bb-array (synth :form element))))
         )
  (:type () (bb-type 'form-array))
  (:imports () (synth :imports element))
  (:dependencies () (synth :dependencies element)))

(defmacro arr (name schema binds elem)
  `(let* ,(mapcar #'(lambda (bind)
		      (destructuring-bind (name key elem) bind
			`(,name (bnd ',key ,elem))))
		  binds) 
     (arr% ,name ,schema (obj% ,name ,schema (list ,@(mapcar #'car binds)) ,elem))))
